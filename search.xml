<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Modbus 异常代码</title>
    <url>/2024/01/16/Modbus%E5%BC%82%E5%B8%B8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="异常响应"><a href="#异常响应" class="headerlink" title="异常响应"></a>异常响应</h3><p>主设备（客户端）或从设备（服务器）中的任何一个出现异常晌应，都会导致数据处理错误。在主设备（客户端）发出一个请求以后，可能出现以下事件中的一种：</p>
<p><strong>o</strong>如果从设备（服务器）从主设备（客户端）接收了请求，其中没有出现通讯错误，并且正确处理了请求，那么它会返回一个正常晌应。</p>
<p><strong>o</strong>如果从设备（服务器）因为通讯错误而没有从主设备（客户端）接收请求，那么它不会返回晌应。主设备程序最终会为请求处理一个超时条件。</p>
<p><strong>o</strong>如果从设备（服务器）从主设备（客户端）接收了请求，但是检测到了一个通讯错误，那么它不会返回晌应。主设备程序最终会为请求处理一个超时条件。</p>
<p><strong>o</strong>如果从设备（服务器）从主设备（客户端）接收了请求，其中没有出现通讯错误，但是无法处理它（比如该请求是读取一个不存在的寄存器），那么从设备就会返回一个异常晌应，以通知主设备出现了何种错误。</p>
<h3 id="异常帧"><a href="#异常帧" class="headerlink" title="异常帧"></a>异常帧</h3><p>从设备向主设备发送了一个异常帧，以报告异常晌应。一个异常帧包括四个域：</p>
<table>
<thead>
<tr>
<th>域</th>
<th>定义</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>从设备号</td>
<td>1 个字节</td>
<td>请求的目的地址<strong>o</strong>1–247：唯一的目的地址</td>
</tr>
<tr>
<td>2</td>
<td>异常功能代码</td>
<td>1 个字节</td>
<td>请求功能代码 +128 (0x80)</td>
</tr>
<tr>
<td>3</td>
<td>异常代码</td>
<td>n 字节</td>
<td>参见下节</td>
</tr>
<tr>
<td>4</td>
<td>检查</td>
<td>2 字节</td>
<td>CRC16（检查传输错误）</td>
</tr>
</tbody></table>
<h3 id="异常代码"><a href="#异常代码" class="headerlink" title="异常代码"></a>异常代码</h3><p>异常晌应帧有两个将其区别于普通晌应帧的字段：</p>
<p><strong>o</strong>异常晌应的异常功能代码等于原请求的功能代码加上 128 (0x80)。</p>
<p><strong>o</strong>异常代码取决于从设备所遇到的通讯错误。</p>
<p>下表介绍了由断路器处理的异常代码：</p>
<table>
<thead>
<tr>
<th>异常代码</th>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>01 (0x01)</td>
<td>非法功能</td>
<td>在请求中接收的功能代码不是从设备的一个授权操作。从设备可能处于错误状态，无法处理特定请求。</td>
</tr>
<tr>
<td>02 (0x02)</td>
<td>非法数据地址</td>
<td>从设备接收的数据地址不是从设备的一个授权地址。</td>
</tr>
<tr>
<td>03 (0x03)</td>
<td>非法数据值</td>
<td>在请求数据栏中的数值不是从设备的一个授权值。</td>
</tr>
<tr>
<td>04 (0x04)</td>
<td>从设备故障</td>
<td>从设备未能执行一个请求的操作，因为出现了一个无法修复的错误。</td>
</tr>
<tr>
<td>05 (0x05)</td>
<td>确认</td>
<td>从设备接受了请求，但是需要较长的时间来处理它。</td>
</tr>
<tr>
<td>06 (0x06)</td>
<td>从设备繁忙</td>
<td>从设备忙于处理另一个命令。主设备必须在从设备空闲后发送请求。</td>
</tr>
<tr>
<td>07 (0x07)</td>
<td>否定确认</td>
<td>从设备无法执行主设备发送的编程请求。</td>
</tr>
<tr>
<td>08 (0x08)</td>
<td>存储器奇偶校验错误</td>
<td>从设备在尝试读取扩展存储器的时候从存储器中检测到一个奇偶校验错误。</td>
</tr>
<tr>
<td>10 (0x0A)</td>
<td>网关通道不可用</td>
<td>网关过载，或者没有正确配置。</td>
</tr>
<tr>
<td>11 (0x0B)</td>
<td>网关目标设备未能晌应</td>
<td>在网络中不存在从设备。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>Modbus</tag>
      </tags>
  </entry>
  <entry>
    <title>MultipartFile</title>
    <url>/2023/12/16/MultipartFile/</url>
    <content><![CDATA[<p>  在使用SpringMVC上传文件的时候，前台传到后台的文件可以是<em><strong>CommonsMultipartFile</strong></em>类型的，也可以是<em><strong>MultipartFile</strong></em>类型，但都无法直接转化为<em><strong>File</strong></em>类型。</p>
<p>  SpringMVC提供了一种方法可以将传过来的文件直接上传到File指定的文件路径下（new File（path）），<em><strong>MultipartFile.<em><strong>transferTo（</strong></em>File</strong></em>），这样就可以直接将前台传过来的文件直接存在服务器指定的路径下。</p>
<p>  通过这种思路，transferTo（）的参数需要指定一个File，那意味这需要指定路径，将会在指定的路径下生成文件，那么将这个文件通过new File（path），得到的就是File类型的了。</p>
<p>  在不希望设置路径，也不希望生成文件的情况下可以使用以下两种方法来转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> File <span class="hljs-title function_">convert</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">convFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file.getOriginalFilename());  <br><br>convFile.createNewFile();<br><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(convFile);<br><br>fos.write(file.getBytes());  <br><br>fos.close();<br><br><span class="hljs-keyword">return</span> convFile;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<br>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> File <span class="hljs-title function_">multipartToFile</span><span class="hljs-params">(MultipartFile multipart)</span> <span class="hljs-keyword">throws</span> IllegalStateException, IOException&#123;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">convFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>( multipart.getOriginalFilename());<br><br>multipart.transferTo(convFile);<br><br><span class="hljs-keyword">return</span> convFile;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>第二种方式相对于第一种较为简单，也更为较快。</p>
<p>作者：凉初透的风<br>链接：<a href="https://www.jianshu.com/p/9262ef452abe">https://www.jianshu.com/p/9262ef452abe</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP报文</title>
    <url>/2023/12/16/Tcp%E6%8A%A5%E6%96%87/</url>
    <content><![CDATA[<p>TCP 报文由首部和数据两部分组成，数据部分如果是 HTTP 协议就是 HTTP 报文，所以主要看 TCP 首部，TCP 首部中的各个字段指示决定 TCP 的工作原理。</p>
<p><img  src="https://icodex.me/assets/images/9rzlJf-4831d39dd3908d461b25a324be57aa52.png"  ><span class="image-caption">9rzlJf</span></p>
<h3 id="源端口和目的端口"><a href="#源端口和目的端口" class="headerlink" title="源端口和目的端口"></a>源端口和目的端口</h3><p>源端口就是客户端发起请求的端口号，目的端口就是接收请求和发送响应的端口，例如 HTTP 协议的服务器响应端口就是<code>80</code>或者<code>443</code>等。</p>
<h3 id="序号-Seq"><a href="#序号-Seq" class="headerlink" title="序号 Seq"></a>序号 Seq</h3><p>TCP 连接是面向字节流的，也就是组成 TCP 报文的最小单位是字节，但是在一个 TCP 连接中，发送者和接收者都可以发送报文，并且还能连续依次发送多个报文；比如说，客户端发给服务器 3 个报文，然后服务器又响应发回 3 个报文这样子。为了在传输过程中排队进行不会混乱，那么就需要序号来保证。</p>
<p>在一个 TCP 连接中每一个字节都要按顺序编号，那么在 TCP 首部中的序号<code>seq</code>就表示<strong>本 TCP 报文所发送的数据的第一个字节的序号</strong>，例如，当前 TCP 报文序号是 200，当前报文的数据部分长度是 100，那么如果这个报文后面还有报文要传输，则下一个报文的首部的序号是 300，就这么按顺序排列！</p>
<p>在首部中，序号固定占 4 个字节，也就是 32 位二进制数字，所以序号范围值是<code>[0, 2^32-1]</code>，从<code>[0, 4294967696]</code>，一个 TCP 连接的序号值不一定从 0 开始，可以在这个范围内随便选一个值，当报文段的序号值到达 2^32-1 时，下一个序号就回到 0 开始。</p>
<p>这个字段是 TCP 连接中最重要的字段！</p>
<h3 id="确认号-Ack"><a href="#确认号-Ack" class="headerlink" title="确认号 Ack"></a>确认号 Ack</h3><p>确认号<code>ack</code>是<strong>指示对方下一次发送的第一个 TCP 报文的首部序号值</strong>，当 TCP 建立连接后它的值是<em>收到的最后一个 TCP 报文的首部序号值加上数据长度值</em>，例如服务器收到的最后一个报文的首部序号值是 200，数据长度是 200，那么服务端下一次发送给客户端的报文段的第一个报文的首部确认号应该是 200+200&#x3D;400，当客户端收到后，下一次发送 TCP 报文段的第一个报文首部序号就是 400。</p>
<p>所以，当确认号为 N 时，表明 N-1 之前的报文段的数据都收到了。</p>
<p><img  src="https://icodex.me/assets/images/image-20200804181002828-c4b8b1e834ce68e4157c4896bec82a64.png"  ><span class="image-caption">image-20200804181002828</span></p>
<h3 id="数据偏移"><a href="#数据偏移" class="headerlink" title="数据偏移"></a>数据偏移</h3><p>TCP 报文的首部长度，这个数字用 4 位二进制表示，<code>1111</code>最大位 15，这个值的单位是 32 位字（以 4 字节长的字为计算单位），所以首部长度最大为 15*4 &#x3D; 60 个字节。</p>
<h3 id="保留"><a href="#保留" class="headerlink" title="保留"></a>保留</h3><p>保留部分占 6 位，暂不知道用处；</p>
<h3 id="控制位"><a href="#控制位" class="headerlink" title="控制位"></a>控制位</h3><p>保留后面接有控制位部分，<strong>每个控制位都使用二进制数字<code>0</code>和<code>1</code>来表示是否激活</strong></p>
<h4 id="紧急-URG"><a href="#紧急-URG" class="headerlink" title="紧急 URG"></a>紧急 URG</h4><p>当 URG 的值为 1 时，表示该报文有紧急数据，应该尽快传送，这时 TCP 就会调整整个 TCP 报文段的传送顺序，将 URG 的值为 1 的紧急报文放在整个报文段的最前面，由于此时报文段的序列号已经被打乱了，所以还需要一个紧急指针（Urgent Pointer）来指示紧急数据末尾在报文段中的位置。</p>
<h4 id="确认-ACK-ACKnowledgment"><a href="#确认-ACK-ACKnowledgment" class="headerlink" title="确认 ACK(ACKnowledgment)"></a>确认 ACK(ACKnowledgment)</h4><p>确认标记位是建立 TCP 连接时使用的关键字段，不要和确认号<code>ack</code>混淆在一块了，<code>ACK</code>只有两个值；当 TCP 报文首部的<code>ACK = 1</code>时，表明当前报文的发送者已经做好了连接建立的准备，并且只有当<code>ACK = 1</code>时，确认号字段才有效；当<code>ACK = 0</code>时，确认号无效。</p>
<p>TCP 规定，在连接建立后所有传送的报文段都必须将 ACK 置<code>1</code>，也就是准备正式传输数据了。</p>
<p>为了区分确认标记和确认号，通常将确认标记写作全大写字母<code>ACK</code>，而确认号用全小写字母表示<code>ack</code>。</p>
<h4 id="推送-PSH-Push"><a href="#推送-PSH-Push" class="headerlink" title="推送 PSH(Push)"></a>推送 PSH(Push)</h4><p>当两个应用程序在通信时，有时一端的应用程序希望在键入一个命令后里立即能收到对方的响应。在这种情况下，TCP 就可以使用推送操作。这时，发送方 TCP 把首部的 TCP 置 1，并立即创建一个报文段发送出去，接收方收到后，就尽快交付给应用程序。</p>
<h4 id="复位-RST-Reset"><a href="#复位-RST-Reset" class="headerlink" title="复位 RST(Reset)"></a>复位 RST(Reset)</h4><p>当<code>RST = 1</code>时，表示 TCP 连接中出现严重差错，必须释放连接，然后重新建立连接。<code>RST = 1</code>还用来拒绝一个非法的报文段或拒绝打开一个连接。</p>
<h4 id="同步-SYN-SYNchronization"><a href="#同步-SYN-SYNchronization" class="headerlink" title="同步 SYN(SYNchronization)"></a>同步 SYN(SYNchronization)</h4><p><code>SYN</code>是 TCP 建立连接的三次握手过程中的重要字段，用于 TCP 建立连接时同步序号。</p>
<ul>
<li>当客户端发起向服务器的第一个连接请求时，TCP 报文首部的<code>SYN = 1</code>，且会在<code>[2,2^32-1]</code>之间选择一个序号<code>seq = x</code>，发送完以后客户端进入<code>SYN-SENT</code>状态（同步已发送）；</li>
<li>服务端收到客户端请求 TCP 报文后，如果同意建立连接，则会向客户端发送确认连接的 TCP 报文，这时的 TCP 报文段首部<code>SYN = 1</code>，同时将自己的确认标记位置为<code>ACK = 1</code>表示已经准备好建立连接了，而服务端也会选择自己的数据序号<code>seq = y</code>放在 TCP 报文的首部，同时因为上个 TCP 报文没有携带任何数据，这时的确认号就是请求报文的序号加 1 即<code>ack = x+1</code>；发送完以后服务端变成<code>SYN-RCVD</code>状态；</li>
<li>客户端在收到服务端的确认连接 TCP 报文后，要再次向服务端发送确认连接的回应，于是发送确认连接 TCP 报文，将自己的确认连接标记<code>ACK = 1</code>；同时根据服务端发回的确认号设置首部序号值<code>seq = x+1</code>；根据服务端的序号设置首部的确认号<code>ack= y+1</code>，发送完以后客户端进入<code>ESTABLISHED</code>状态</li>
<li>当 B 收到 A 的回应后，B 也进入<code>ESTABLISHED</code>状态</li>
</ul>
<h4 id="终止-FIN-Finish"><a href="#终止-FIN-Finish" class="headerlink" title="终止 FIN(Finish)"></a>终止 FIN(Finish)</h4><p>这也是 TCP 连接必须掌握的字段，用来终止 TCP 连接的字段，当<code>FIN = 1</code>时，就表示要求终止连接。</p>
<h3 id="窗口-window"><a href="#窗口-window" class="headerlink" title="窗口(window)"></a>窗口(window)</h3><p>窗口指的是发送本报文段的一方的接收窗口，窗口值用来限制接收方允许对方发送的数据量（以字节为单位，不包含首部的长度），因为接收方的数据缓存空间是有限的。</p>
<h3 id="检验和Checksum）"><a href="#检验和Checksum）" class="headerlink" title="检验和Checksum）"></a>检验和Checksum）</h3><p>确保数据在传输过程中的完整性。校验和是一种简单的差错检测方法，用于检测数据是否在传输过程中发生了错误或损坏。在TCP协议中，校验和主要用于检验TCP报文段（TCP segment）的完整性。</p>
<h3 id="紧急指针-Urgent-Pointer"><a href="#紧急指针-Urgent-Pointer" class="headerlink" title="紧急指针(Urgent Pointer)"></a>紧急指针(Urgent Pointer)</h3><p>配合紧急 URG 首部使用的</p>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>长度可变，最长可达 40 字节，如果没有<code>选项</code>这个部分，TCP 报文首部长度就是 20 字节。</p>
<h5 id="MSS"><a href="#MSS" class="headerlink" title="MSS"></a>MSS</h5><p>MSS，Maximum segment size，MSS 是每个 TCP 报文的<strong>数据部分的最大长度</strong>。</p>
<hr>
<p>链接：<a href="https://icodex.me/docs/network/%E8%BF%90%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87/">https://icodex.me/docs/network/%E8%BF%90%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87/</a><br>来源：<a href="https://icodex.me/">https://icodex.me/</a><br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>java</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2023/12/16/jvm/</url>
    <content><![CDATA[<p>JVM 内存结构主要包括堆（Heap）、栈（Stack）、方法区（Method Area）、程序计数器（Program Counter）和本地方法栈（Native Method Stack）。下面简要介绍这三个区域的职责和存储内容：</p>
<h3 id="1-堆（Heap）："><a href="#1-堆（Heap）：" class="headerlink" title="1. 堆（Heap）："></a>1. 堆（Heap）：</h3><ul>
<li><strong>职责：</strong> 堆是 Java 虚拟机用于存储对象实例的区域。它是被所有线程共享的内存区域。</li>
<li><strong>存储内容：</strong> 主要存储对象实例，包括实例变量、数组等。堆是在 Java 程序运行时动态分配和回收内存的区域，由垃圾回收器负责管理。</li>
</ul>
<h3 id="2-栈（Stack）："><a href="#2-栈（Stack）：" class="headerlink" title="2. 栈（Stack）："></a>2. 栈（Stack）：</h3><ul>
<li><strong>职责：</strong> 栈是每个线程私有的，用于存储方法调用和局部变量的区域。每个方法调用都会在栈上创建一个栈帧，用于存储方法的局部变量、操作数栈、方法返回地址等信息。</li>
<li><strong>存储内容：</strong> 主要存储局部变量、方法参数、操作数栈和方法调用的状态。栈是一个后进先出（LIFO）的数据结构。</li>
</ul>
<h3 id="3-方法区（Method-Area）："><a href="#3-方法区（Method-Area）：" class="headerlink" title="3. 方法区（Method Area）："></a>3. 方法区（Method Area）：</h3><ul>
<li><strong>职责：</strong> 方法区是用于存储类的元信息、静态变量、常量池、方法代码等信息的区域。在 Java 8 及之前的版本，方法区被称为永久代。在 Java 8 及之后的版本，永久代被移除，方法区的内容被移到元空间（Metaspace）。</li>
<li><strong>存储内容：</strong> 主要存储类的元数据信息、静态变量、常量池、方法代码等。方法区是被所有线程共享的。</li>
</ul>
<p>需要注意的是，虽然 Java 8 及之后的版本移除了永久代，但方法区的内容仍然存在，只是被称为元空间。元空间的特点是它不再有固定的大小，而是根据需要动态分配。此外，元空间的垃圾回收由 JVM 来处理。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>ModBus常用功能码</title>
    <url>/2023/12/16/modbus%E5%8A%9F%E8%83%BD%E7%A0%81/</url>
    <content><![CDATA[<h3 id="0x01-读线圈"><a href="#0x01-读线圈" class="headerlink" title="0x01: 读线圈"></a>0x01: 读线圈</h3><p><strong>Request:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte)</li>
<li><strong>功能码</strong> (1 byte): 读线圈</li>
<li><strong>起始地址</strong> (2 bytes): 指定需要读取线圈的起始地址</li>
<li><strong>线圈数量</strong> (2 bytes): 指定需要读取线圈的数量</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<p><strong>Response:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte)</li>
<li><strong>字节数</strong> (1 byte): 返回的字节数</li>
<li><strong>线圈状态</strong> (长度为字节数除以8向上取整)</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<h3 id="0x03-读保持寄存器"><a href="#0x03-读保持寄存器" class="headerlink" title="0x03: 读保持寄存器"></a>0x03: 读保持寄存器</h3><p><strong>Request:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte): 读线圈</li>
<li><strong>起始地址</strong> (2 bytes): 指定需要读取寄存器的起始地址</li>
<li><strong>寄存器数量</strong> (2 bytes): 指定需要读取寄存器的数量</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<p><strong>Response:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte)</li>
<li><strong>数据字节数</strong> (1 byte): 返回的字节数</li>
<li><strong>数据</strong> (长度为数据字节数中的值)</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<h3 id="0x05-写单个线圈"><a href="#0x05-写单个线圈" class="headerlink" title="0x05: 写单个线圈"></a>0x05: 写单个线圈</h3><p><strong>Request:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte)</li>
<li><strong>起始地址</strong> (2 bytes): 指定需要写入线圈的起始地址</li>
<li><strong>数据</strong> (2 bytes): 需要写入的数据</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<p><strong>Response:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte): 读线圈</li>
<li><strong>起始地址</strong> (2 bytes): 写入线圈的起始地址</li>
<li><strong>数据</strong> (2 bytes): 写入的数据</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<h3 id="0x06-写单个寄存器"><a href="#0x06-写单个寄存器" class="headerlink" title="0x06: 写单个寄存器"></a>0x06: 写单个寄存器</h3><p><strong>Request:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte)</li>
<li><strong>起始地址</strong> (2 bytes): 指定需要写入寄存器的起始地址</li>
<li><strong>数据</strong> (2 bytes): 需要写入的数据</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<p><strong>Response:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte) </li>
<li><strong>功能码</strong> (1 byte): 读线圈</li>
<li><strong>起始地址</strong> (2 bytes): 写入寄存器的起始地址</li>
<li><strong>数据</strong> (2 bytes): 写入的数据</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<h2 id="0x10-写多个寄存器"><a href="#0x10-写多个寄存器" class="headerlink" title="0x10: 写多个寄存器"></a>0x10: 写多个寄存器</h2><p><strong>Request:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte)</li>
<li><strong>功能码</strong> (1 byte)</li>
<li><strong>起始地址</strong> (2 bytes): 指定需要写入寄存器的起始地址</li>
<li><strong>寄存器数量</strong> (2 bytes): 指定需要写入寄存器的数量</li>
<li><strong>数据长度</strong> (1 byte): 需要写入的数据的字节数</li>
<li><strong>数据</strong> (长度为数据长度中的值): 需要写入的数据</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
<p><strong>Response:</strong></p>
<ul>
<li><strong>地址</strong> (1 byte)</li>
<li><strong>功能码</strong> (1 byte): 读线圈</li>
<li><strong>起始地址</strong> (2 bytes): 写入寄存器的起始地址</li>
<li><strong>寄存器数量</strong> (2 bytes): 写入寄存器的数量</li>
<li><strong>CRC校验码</strong> (2 bytes)</li>
</ul>
]]></content>
      <categories>
        <category>c#</category>
      </categories>
      <tags>
        <tag>ModBus</tag>
      </tags>
  </entry>
  <entry>
    <title>模式匹配</title>
    <url>/2023/12/16/%E6%A8%A1%E5%9E%8B%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p>模式匹配是 C# 中的一项强大功能，它允许你以更直观的方式处理各种数据形式。C# 中引入了模式匹配以支持更灵活和表达力强的代码。</p>
<p>以下是一些常见的模式匹配用法：</p>
<h3 id="1-类型模式匹配："><a href="#1-类型模式匹配：" class="headerlink" title="1. 类型模式匹配："></a>1. 类型模式匹配：</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">csharpCopy codeobject data = <span class="hljs-number">42</span>;<br><br><span class="hljs-keyword">if</span> (data <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span> intValue)<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">$&quot;It&#x27;s an integer: <span class="hljs-subst">&#123;intValue&#125;</span>&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Not an integer&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2-Switch-表达式："><a href="#2-Switch-表达式：" class="headerlink" title="2. Switch 表达式："></a>2. Switch 表达式：</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">csharpCopy codeobject <span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;Hello&quot;</span>;<br><br><span class="hljs-built_in">string</span> result = <span class="hljs-keyword">value</span> <span class="hljs-keyword">switch</span><br>&#123;<br>    <span class="hljs-built_in">int</span> intValue =&gt; <span class="hljs-string">&quot;It&#x27;s an integer&quot;</span>,<br>    <span class="hljs-built_in">string</span> stringValue =&gt; <span class="hljs-string">$&quot;It&#x27;s a string: <span class="hljs-subst">&#123;stringValue&#125;</span>&quot;</span>,<br>    _ =&gt; <span class="hljs-string">&quot;Unknown type&quot;</span><br>&#125;;<br><br>Console.WriteLine(result);<br></code></pre></td></tr></table></figure>

<h3 id="3-属性模式："><a href="#3-属性模式：" class="headerlink" title="3. 属性模式："></a>3. 属性模式：</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">csharpCopy codeclass Person<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br><br>Person person = <span class="hljs-keyword">new</span> Person &#123; Name = <span class="hljs-string">&quot;John&quot;</span>, Age = <span class="hljs-number">30</span> &#125;;<br><br><span class="hljs-keyword">if</span> (person <span class="hljs-keyword">is</span> &#123; Name: <span class="hljs-string">&quot;John&quot;</span> &#125; johnPerson)<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">$&quot;Found John, aged <span class="hljs-subst">&#123;johnPerson.Age&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4-Tuple-模式："><a href="#4-Tuple-模式：" class="headerlink" title="4. Tuple 模式："></a>4. Tuple 模式：</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">csharpCopy codevar tuple = (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-number">3.14</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-function">tuple <span class="hljs-title">is</span> (<span class="hljs-params"><span class="hljs-built_in">int</span> x, <span class="hljs-built_in">string</span> message, <span class="hljs-built_in">double</span> z</span>))</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">$&quot;Values: <span class="hljs-subst">&#123;x&#125;</span>, <span class="hljs-subst">&#123;message&#125;</span>, <span class="hljs-subst">&#123;z&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="5-Positional-模式："><a href="#5-Positional-模式：" class="headerlink" title="5. Positional 模式："></a>5. Positional 模式：</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#">csharpCopy codevar point = (x: <span class="hljs-number">3</span>, y: <span class="hljs-number">7</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-function">point <span class="hljs-title">is</span> (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">7</span></span>))</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Point is at (3, 7)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="6-类型测试和转换："><a href="#6-类型测试和转换：" class="headerlink" title="6. 类型测试和转换："></a>6. 类型测试和转换：</h3><figure class="highlight c#"><table><tr><td class="code"><pre><code class="hljs c#"><span class="hljs-function">csharpCopy <span class="hljs-title">codeif</span> (<span class="hljs-params">data <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span> || data <span class="hljs-keyword">is</span> <span class="hljs-built_in">string</span></span>)</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Data is either int or string&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (data <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span> intValue)<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">$&quot;Converted to int: <span class="hljs-subst">&#123;intValue&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>模式匹配使得在处理不同数据类型和结构时更加方便，可以根据数据的形状进行更细粒度的操作。这些示例只是模式匹配的一小部分功能，实际上它可以处理更复杂的情况，例如递归模式、组合模式等。</p>
]]></content>
      <categories>
        <category>c#</category>
      </categories>
  </entry>
  <entry>
    <title>秒杀系统</title>
    <url>/2023/12/16/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="超卖"><a href="#超卖" class="headerlink" title="超卖"></a>超卖</h3><ul>
<li><p><strong>问题：</strong>实际售卖的商品数量超过了实际库存量，可能导致系统错误、用户体验下降以及商家损失等问题。秒杀系统中的超卖问题是比较常见的挑战，因为瞬时高并发情况下，多个用户同时购买同一商品可能会导致库存数量不一致。</p>
</li>
<li><p><strong>解决：</strong></p>
<ol>
<li><p>将商品的库存缓存到数据库中，收到秒杀请求，先在Redis中进行预减，Redis库存不足，直接返回秒杀失败。如果有库存将请求放入异步消息队列中（RabbitMQ）中。</p>
</li>
<li><p>通过使用乐观锁或悲观锁来保护库存操作，以防止多个用户同时减少库存，确保只有一个用户能够成功减库存。乐观锁通常使用版本号或时间戳来实现，而悲观锁则是通过数据库的锁机制。</p>
</li>
</ol>
</li>
</ul>
<h3 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h3><ul>
<li><p><strong>问题：</strong>大量用户会在短时间内争相购买有限数量的商品。缓存击穿、缓存穿透、缓存雪崩，导致大量请求打到数据库、缓存一致性等问题。</p>
</li>
<li><p><strong>解决：</strong></p>
<ol>
<li><p>缓存一致性：使用canal组件实现，解析数据库的二进制日志（binlog）来获取数据库的变更数据，并通过网络协议将数据传输到订阅者端。更新数据库后立即删除缓存，下一次请求找不到缓存数据，查询数据同步到缓存。</p>
</li>
<li><p>缓存预热：</p>
<p>将商品信息提前缓存到Redis。</p>
</li>
<li><p>异步下单：</p>
<p>在判断缓存中还存在库存时，给mq发生消息，然后给用户返回“秒杀成功，正在创建订单”，让订单服务监听mq，异步进行订单的创建、扣减库存等操作，防止请求阻塞等待订单创建完成才给用户返回结果。</p>
</li>
<li><p>限流：</p>
<p>​		令牌桶算法：令牌桶算法是一种基于令牌的限流算法。系统会维护一个令牌桶，每个令牌代表  一个请求的处理能力。当用户发起请求时，需要从令牌桶中获取一个令牌，如果令牌桶为空，则该请求被拒绝。通过控制令牌的生成速率和桶的容量，可以限制系统的请求处理能力。</p>
<p>​		 漏桶算法：漏桶算法是一种基于漏桶的限流算法。系统会维护一个固定容量的漏桶，每个请求都会以恒定的速率流入漏桶，如果漏桶已满，则多余的请求会被丢弃。通过控制漏桶的容量和漏水速率，可以限制系统的请求处理速度。</p>
<p>​		计数器限流：计数器限流是一种简单有效的限流策略。系统会维护一个计数器，记录单位时间内的请求次数。当请求次数超过设定的阈值时，后续的请求会被暂时拒绝。可以根据系统的处理能力和预期的并发量来设置合适的阈值。</p>
</li>
<li><p>定时关单 ：</p>
<p>当订单创建成功，给mq交换机发生信息（订单实体对象），交换机根据路由键转发到延迟队列（rabbitMQ没有延迟队列，可以通过死信队列实现，设置ttl，过期进入死信队列，消费者监听死信队列或者社区插件），关单服务监听死信队列，拿到消息后判单订单状态，如果是带支付状态就进行关单，把订单状态设置为已取消。</p>
</li>
</ol>
</li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>​     针对秒杀系统的数据库问题，应该单独设计秒杀数据库，防止秒杀系统的高并发拖垮整个网站。数据库包含秒杀用户表、商品信息表、秒杀商品表、秒杀订单表。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot邮箱</title>
    <url>/2023/11/26/SpringBoot%E9%82%AE%E7%AE%B1/</url>
    <content><![CDATA[<ul>
<li><p><strong>Maven依赖</strong></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>项目配置</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-comment"># 邮箱验证配置信息|必填</span><br>    <span class="hljs-attr">mail:</span><br>       <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.qq.com</span>   <span class="hljs-comment"># 如果你需要使用非qq邮箱，请自行配置host</span><br>       <span class="hljs-attr">username:</span> <span class="hljs-comment"># 请自行配置邮箱地址</span><br>       <span class="hljs-attr">password:</span> <span class="hljs-comment"># 请自行配置邮箱smtp授权码，参考邮箱配置</span><br>       <span class="hljs-attr">port:</span> <span class="hljs-number">587</span><br>       <span class="hljs-attr">default-encoding:</span> <span class="hljs-string">UTF-8</span><br>       <span class="hljs-attr">timeout:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 验证码有效时间 单位：分钟</span><br>       <span class="hljs-attr">properties:</span><br>         <span class="hljs-attr">mail:</span><br>           <span class="hljs-attr">smtp:</span><br>             <span class="hljs-attr">socketFactoryClass:</span> <span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br>           <span class="hljs-comment"># 开启debug以后，邮件发送过程的日志会在控制台上打印出来</span><br>           <span class="hljs-attr">debug:</span> <span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>邮箱配置</strong><br>    该邮箱作为发送验证码的用途，在这里我建议使用QQ邮箱，因为QQ邮箱的SMTP服务是免费的，而且不需要进行额外的配置。SMTP服务的配置信息可以在QQ邮箱的设置中找到，登陆<a href="https://mail.qq.com/">你的QQ邮箱</a>，点击左上角的设置按钮，选择<code>设置</code>，选择<code>账户</code>，找到<code>开启POP3/SMTP服务</code>，经过一系列的确认后，你将获得一个<code>授权码</code>，这个授权码就是你的邮箱密码<code>password</code>，你可以在<code>application.yml</code>中的邮箱配置信息中配置它。</p>
</li>
<li><p><strong>发送信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 邮箱发送器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> JavaMailSender javaMailSender;<br>  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送验证码的邮箱地址</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String FROM;<br>  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 失效时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Value(&quot;$&#123;spring.mail.timeout&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> TIME_OUT_MINUTES;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 发送邮件</span><br><span class="hljs-comment">// 构建一个邮件对象</span><br><span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">simpleMailMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();<br><span class="hljs-comment">// 设置邮件发送者</span><br>simpleMailMessage.setFrom(FROM);<br><span class="hljs-comment">// 设置邮件接收者</span><br>simpleMailMessage.setTo(email);<br><span class="hljs-comment">// 设置邮件主题</span><br>simpleMailMessage.setSubject(<span class="hljs-string">&quot;[xx系统]登陆验证码&quot;</span>);<br><span class="hljs-comment">// 设置邮件内容</span><br>simpleMailMessage.setText(<span class="hljs-string">&quot;您的验证码为：&quot;</span> + code + <span class="hljs-string">&quot;，请在&quot;</span> + TIME_OUT_MINUTES + <span class="hljs-string">&quot;分钟内使用！\n【该邮件为系统自动发送，请勿回复】&quot;</span>);<br><span class="hljs-comment">// 将验证码存入redis，设置失效时间TIME_OUT_MINUTES分钟</span><br>redisTemplate.opsForValue().set(email, code, TIME_OUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES);<br><span class="hljs-comment">// 发送邮件</span><br><span class="hljs-keyword">try</span> &#123;<br>    javaMailSender.send(simpleMailMessage);<br>&#125; <span class="hljs-keyword">catch</span> (MailException e) &#123;<br>    e.printStackTrace();<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(<span class="hljs-string">&quot;致命错误！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>登录</strong></p>
<ol>
<li>用户输入邮箱号，点击获取验证码。</li>
<li>后端controller层获取邮箱号。</li>
<li>后端检查Redis是否存在该邮箱的验证码，如果存在则提示用户“请勿重复获取验证码”</li>
<li>生成6位随机数（密码），设置过期时间，存入Redis。</li>
<li>调用service层方法去发送邮件携带验证码给该邮箱。</li>
<li>用户收到邮件，输入验证码。</li>
<li>后端获取验证码，与Redis中的密码进行对比。</li>
<li>对比成功进入系统主界面，失败提示用户“验证码错误，请重新输入验证码”。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
